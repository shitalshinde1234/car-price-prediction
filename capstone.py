# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LVeUbPZHuNxuGvo8W3BwvW9abN_rTCXa
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import logging
warnings.filterwarnings('ignore')
df=pd.read_csv('/content/CAR DETAILS.csv')
df.head(100)

df.info()

"""# **Checking null values**"""

df.isnull().sum()

df.shape

"""# **Checking distribution of categorical data**


"""

print(df.fuel.value_counts())
print(df.seller_type.value_counts())
print(df.transmission.value_counts())

df["fuel"].unique()

import numpy as np
log_price=np.log(df['selling_price'])
sns.distplot(log_price)
plt.show()

df['log_price']=log_price
df.head()

"""# **Encoding the categorical data**"""

df.replace({'fuel':{'Petrol':0,'Diesel':1,'CNG':2,'LPG':3,'Electric':4}},inplace=True)
df.replace({'seller_type':{'Dealer':0,'Individual':1,'Trustmark Dealer':2}},inplace=True)
df.replace({'transmission':{'Manual':0,'Automatic':1}},inplace=True)
df.replace({'owner':{'First Owner':0,'Second Owner':1,'Third Owner':2,'Fourth & Above Owner':3,'Test Drive Car':4}},inplace=True)
df.head()

"""# **Splitting data into Training data and Test data**"""

x=df.drop(['name','log_price'],axis=1)
y=df['log_price']
print(x)
print(y)
print(x.shape)
print(y.shape)



from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso ,Ridge
from sklearn.metrics import accuracy_score
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error


x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

LR_reg=LinearRegression()
LR_reg.fit(x_train,y_train)

from sklearn.metrics import r2_score
train_data_prediction=LR_reg.predict(x_train)
r2_score=r2_score(y_train,train_data_prediction)
print('r2_score : ',r2_score)

"""# **Visualisation and prediction of car price**"""

plt.scatter(y_train,train_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

df.groupby(['year'])['selling_price'].count()

plt.figure(figsize=(15,5))
sns.countplot(x='year',data=df)
plt.title("year")
plt.xlabel("year")
plt.ylabel("Count")
plt.show()



"""# **Lasso regression and Ridge Regression**"""

lasso_reg=Lasso()
lasso_reg.fit(x_train,y_train)

lasso_reg.score(x_train,y_train)
print("lasso_reg :",lasso_reg.score(x_train,y_train))

ridge_regression=Ridge()
ridge_regression.fit(x_train,y_train)

ridge_regression.score(x_train,y_train)
print("ridge_regression :",ridge_regression.score(x_train,y_train))

from sklearn.ensemble import RandomForestRegressor
rf_reg=RandomForestRegressor()
rf_reg.fit(x_train,y_train)
train_data_prediction=rf_reg.predict(x_train)
r2_score=r2_score(y_train,train_data_prediction)
print('r2_score : ',r2_score)

from sklearn.neighbors import KNeighborsRegressor
knn=KNeighborsRegressor()
knn.fit(x_train,y_train)
train_data_prediction=knn.predict(x_train)
print('knn_score : ',r2_score)

sns.distplot(y_train-train_data_prediction)
plt.show()

sns.scatterplot(y_train-train_data_prediction)
plt.show()

"""# **Save model**"""

import pickle
filename='trained_model.sav'
pickle.dump(LR_reg,open(filename,'wb'))

loaded_model=pickle.load(open(filename,'rb'))
print(loaded_model)

"""# **To pick randomly 20 rows**"""

df1=df.sample(n=20)
df1.head()

df1.info()

df1.isnull().sum()

x=df1.drop(['name','log_price'],axis=1)
y=df1['log_price']
print(x)
print(y)
print(x.shape)
print(y.shape)

df1.describe()

df1['year'].value_counts()

plt.figure(figsize=(15,5))
sns.countplot(x='year',data=df1)
plt.title("year")
plt.xlabel("year")
plt.ylabel("Count")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso ,Ridge
from sklearn.metrics import accuracy_score
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

from re import L
LR_reg=LinearRegression()
LR_reg.fit(x_train,y_train)
LR_predict=LR_reg.predict(x_test)
r2_score=r2_score(y_test,LR_predict)
print('r2_score : ',r2_score)
print("LR_predict:",LR_predict)

"""# **Lasso regression and Ridge Regression**"""

lasso_reg=Lasso()
lasso_reg.fit(x_train,y_train)
lasso_predict=lasso_reg.predict(x_test)

print('r2_score : ',r2_score)

print("lasso_predict:",lasso_predict)

ridge_regression=Ridge()
ridge_regression.fit(x_train,y_train)
ridge_predict=ridge_regression.predict(x_test)

print('r2_score : ',r2_score)

print("ridge_predict:",ridge_predict)

"""# **Decision Tree Classifier**"""

from sklearn.ensemble import RandomForestRegressor
rf_reg=RandomForestRegressor()
rf_reg.fit(x_train,y_train)
train_data_prediction=rf_reg.predict(x_train)

print('r2_score : ',r2_score)

"""# **KNN**"""

from sklearn.neighbors import KNeighborsRegressor
knn=KNeighborsRegressor()
knn.fit(x_train,y_train)
train_data_prediction=knn.predict(x_train)
print('knn_score : ',r2_score)

"""# **To Save And Load Model**"""

import pickle
filename='test_model.sav'
pickle.dump(LR_reg,open(filename,'wb'))

loaded_model=pickle.load(open(filename,'rb'))
print(loaded_model)